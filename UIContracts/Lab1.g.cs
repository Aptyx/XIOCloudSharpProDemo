//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by CrestronConstruct.
//     AppHost:     2.101.8.0
//     UI Plugin:   1.3701.9.0
//
//     Project:     MEP621_XPanel
//     Version:     1.0.0.0
//     Sdk:         CH5:2.11.1.2
//     Strategy:    Modern
//     IndexOnly:   False
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Crestron.SimplSharp;
using Crestron.SimplSharpPro;
using Crestron.SimplSharpPro.DeviceSupport;
using MEP621_XPanel;

namespace MEP621_XPanel
{

    /// <summary>
    /// Lab1
    /// </summary>
    public partial interface ILab1 
    {
        object UserObject { get; set; }

        /// <summary>
        /// Event txtInputField.Output Text (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> txtInputField_OutputTextEvent;

        /// <summary>
        /// Event btnAlert.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> btnAlert_PressEvent;

        /// <summary>
        /// Event btnBack.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> btnBack_PressEvent;

        /// <summary>
        /// Event btnOccupancy.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> btnOccupancy_PressEvent;

        /// <summary>
        /// Event btnOccupancyFb.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> btnOccupancyFb_PressEvent;

        /// <summary>
        /// Event btnVacancyFb.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> btnVacancyFb_PressEvent;

        /// <summary>
        /// btnAlert.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void btnAlert_Selected(Lab1BoolInputSigDelegate callback);

        /// <summary>
        /// btnAlert.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void btnAlert_Selected(bool digital);

        /// <summary>
        /// btnBack.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void btnBack_Selected(Lab1BoolInputSigDelegate callback);

        /// <summary>
        /// btnBack.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void btnBack_Selected(bool digital);

        /// <summary>
        /// btnOccupancy.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void btnOccupancy_Selected(Lab1BoolInputSigDelegate callback);

        /// <summary>
        /// btnOccupancy.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void btnOccupancy_Selected(bool digital);

        /// <summary>
        /// btnOccupancyFb.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void btnOccupancyFb_Selected(Lab1BoolInputSigDelegate callback);

        /// <summary>
        /// btnOccupancyFb.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void btnOccupancyFb_Selected(bool digital);

        /// <summary>
        /// btnVacancyFb.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void btnVacancyFb_Selected(Lab1BoolInputSigDelegate callback);

        /// <summary>
        /// btnVacancyFb.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void btnVacancyFb_Selected(bool digital);

        /// <summary>
        /// txtInputField.Indirect Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void txtInputField_IndirectText(Lab1StringInputSigDelegate callback);

        /// <summary>
        /// txtInputField.Indirect Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void txtInputField_IndirectText(string serial);

        /// <summary>
        /// txtAlert.Indirect Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void txtAlert_Indirect(Lab1StringInputSigDelegate callback);

        /// <summary>
        /// txtAlert.Indirect Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void txtAlert_Indirect(string serial);

        /// <summary>
        /// txtRoomName.Indirect Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void txtRoomName_Indirect(Lab1StringInputSigDelegate callback);

        /// <summary>
        /// txtRoomName.Indirect Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void txtRoomName_Indirect(string serial);
    }

    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="boolInputSig">The <see cref="BoolInputSig"/> joinInfo data.</param>
    /// <param name="lab1">The <see cref="ILab1"/> on which to apply the feedback.</param>
    public delegate void Lab1BoolInputSigDelegate(BoolInputSig boolInputSig, ILab1 lab1);
    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="stringInputSig">The <see cref="StringInputSig"/> joinInfo data.</param>
    /// <param name="lab1">The <see cref="ILab1"/> on which to apply the feedback.</param>
    public delegate void Lab1StringInputSigDelegate(StringInputSig stringInputSig, ILab1 lab1);

    /// <summary>
    /// Lab1
    /// </summary>
    internal partial class Lab1 : ILab1, IDisposable
    {
        #region Standard CH5 Component members

        private ComponentMediator ComponentMediator { get; set; }

        public object UserObject { get; set; }

        /// <summary>
        /// Gets the ControlJoinId a.k.a. SmartObjectId.  This Id identifies the extender symbol.
        /// </summary>
        public uint ControlJoinId { get; private set; }

        private IList<BasicTriListWithSmartObject> _devices;

        /// <summary>
        /// Gets the list of devices.
        /// </summary>
        public IList<BasicTriListWithSmartObject> Devices { get { return _devices; } }

        #endregion

        #region Joins

        private static class Joins
        {
            /// <summary>
            /// Digital signals,
            /// </summary>
            internal static class Booleans
            {
                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Lab1.btnAlert.Press
                /// btnAlert.Press
                /// </summary>
                public const uint btnAlert_PressEvent = 3;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Lab1.btnBack.Press
                /// btnBack.Press
                /// </summary>
                public const uint btnBack_PressEvent = 4;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Lab1.btnOccupancy.Press
                /// btnOccupancy.Press
                /// </summary>
                public const uint btnOccupancy_PressEvent = 5;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Lab1.btnOccupancyFb.Press
                /// btnOccupancyFb.Press
                /// </summary>
                public const uint btnOccupancyFb_PressEvent = 6;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Lab1.btnVacancyFb.Press
                /// btnVacancyFb.Press
                /// </summary>
                public const uint btnVacancyFb_PressEvent = 7;


                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Lab1.btnAlert.Selected
                /// btnAlert.Selected
                /// </summary>
                public const uint btnAlert_SelectedState = 3;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Lab1.btnBack.Selected
                /// btnBack.Selected
                /// </summary>
                public const uint btnBack_SelectedState = 4;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Lab1.btnOccupancy.Selected
                /// btnOccupancy.Selected
                /// </summary>
                public const uint btnOccupancy_SelectedState = 5;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Lab1.btnOccupancyFb.Selected
                /// btnOccupancyFb.Selected
                /// </summary>
                public const uint btnOccupancyFb_SelectedState = 6;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Lab1.btnVacancyFb.Selected
                /// btnVacancyFb.Selected
                /// </summary>
                public const uint btnVacancyFb_SelectedState = 7;

            }
            /// <summary>
            /// Serial signals.
            /// </summary>
            internal static class Strings
            {
                /// <summary>
                /// Output or Event serial joinInfo from panel to Control System: Lab1.txtInputField.OutputText
                /// txtInputField.Output Text
                /// </summary>
                public const uint txtInputField_OutputTextEvent = 1;

                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: Lab1.txtInputField.IndirectText
                /// txtInputField.Indirect Text
                /// </summary>
                public const uint txtInputField_IndirectTextState = 1;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: Lab1.txtAlert.Indirect
                /// txtAlert.Indirect
                /// </summary>
                public const uint txtAlert_IndirectState = 2;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: Lab1.txtRoomName.Indirect
                /// txtRoomName.Indirect
                /// </summary>
                public const uint txtRoomName_IndirectState = 3;
            }
        }

        #endregion

        #region Construction and Initialization

        /// <summary>
        /// Initializes a new instance of the <see cref="Lab1"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        internal Lab1(ComponentMediator componentMediator, uint controlJoinId, uint? itemCount)
        {
            ComponentMediator = componentMediator;
            Initialize(controlJoinId, itemCount);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Lab1"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        internal Lab1(ComponentMediator componentMediator, uint controlJoinId) : this(componentMediator, controlJoinId, null)
        {
        }

        /// <summary>
        /// Initializes a new instance with default itemCount.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        private void Initialize(uint controlJoinId)
        {
            Initialize(controlJoinId, null);
        }

        private Dictionary<string, Indexes> _indexLookup = new Dictionary<string, Indexes>();

        /// <summary>
        /// Initializes a new instance of the <see cref="Lab1"/> component class.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        private void Initialize(uint controlJoinId, uint? itemCount)
        {
            ControlJoinId = controlJoinId; 
 
            _devices = new List<BasicTriListWithSmartObject>(); 
 
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.btnAlert_PressEvent, onbtnAlert_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.btnBack_PressEvent, onbtnBack_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.btnOccupancy_PressEvent, onbtnOccupancy_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.btnOccupancyFb_PressEvent, onbtnOccupancyFb_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.btnVacancyFb_PressEvent, onbtnVacancyFb_Press);
            ComponentMediator.ConfigureStringEvent(controlJoinId, Joins.Strings.txtInputField_OutputTextEvent, ontxtInputField_OutputText);
        }

        public void AddDevice(BasicTriListWithSmartObject device)
        {
            Devices.Add(device);
            ComponentMediator.HookSmartObjectEvents(device.SmartObjects[ControlJoinId]);
        }

        public void RemoveDevice(BasicTriListWithSmartObject device)
        {
            Devices.Remove(device);
            ComponentMediator.UnHookSmartObjectEvents(device.SmartObjects[ControlJoinId]);
        }

        #endregion

        #region CH5 Contract

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> txtInputField_OutputTextEvent;
        private void ontxtInputField_OutputText(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = txtInputField_OutputTextEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> btnAlert_PressEvent;
        private void onbtnAlert_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = btnAlert_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> btnBack_PressEvent;
        private void onbtnBack_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = btnBack_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> btnOccupancy_PressEvent;
        private void onbtnOccupancy_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = btnOccupancy_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> btnOccupancyFb_PressEvent;
        private void onbtnOccupancyFb_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = btnOccupancyFb_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> btnVacancyFb_PressEvent;
        private void onbtnVacancyFb_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = btnVacancyFb_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public void btnAlert_Selected(Lab1BoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.btnAlert_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void btnAlert_Selected(bool digital)
        {
            btnAlert_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void btnBack_Selected(Lab1BoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.btnBack_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void btnBack_Selected(bool digital)
        {
            btnBack_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void btnOccupancy_Selected(Lab1BoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.btnOccupancy_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void btnOccupancy_Selected(bool digital)
        {
            btnOccupancy_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void btnOccupancyFb_Selected(Lab1BoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.btnOccupancyFb_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void btnOccupancyFb_Selected(bool digital)
        {
            btnOccupancyFb_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void btnVacancyFb_Selected(Lab1BoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.btnVacancyFb_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void btnVacancyFb_Selected(bool digital)
        {
            btnVacancyFb_Selected((sig, component) => sig.BoolValue = digital);
        }


        /// <inheritdoc/>
        public void txtAlert_Indirect(Lab1StringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.txtAlert_IndirectState], this);
            }
        }

        /// <inheritdoc/>
        public void txtAlert_Indirect(string serial)
        {
            txtAlert_Indirect((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void txtInputField_IndirectText(Lab1StringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.txtInputField_IndirectTextState], this);
            }
        }

        /// <inheritdoc/>
        public void txtInputField_IndirectText(string serial)
        {
            txtInputField_IndirectText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void txtRoomName_Indirect(Lab1StringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.txtRoomName_IndirectState], this);
            }
        }

        /// <inheritdoc/>
        public void txtRoomName_Indirect(string serial)
        {
            txtRoomName_Indirect((sig, component) => sig.StringValue = serial);
        }

        #endregion

        #region Overrides

        public override int GetHashCode()
        {
            return (int)ControlJoinId;
        }

        public override string ToString()
        {
            return string.Format("Contract: {0} Component: {1} HashCode: {2} {3}", "Lab1", GetType().Name, GetHashCode(), UserObject != null ? "UserObject: " + UserObject : null);
        }

        #endregion

        #region IDisposable

        public bool IsDisposed { get; set; }

        public void Dispose()
        {
            if (IsDisposed)
                return;

            IsDisposed = true;

            txtInputField_OutputTextEvent = null;
            btnAlert_PressEvent = null;
            btnBack_PressEvent = null;
            btnOccupancy_PressEvent = null;
            btnOccupancyFb_PressEvent = null;
            btnVacancyFb_PressEvent = null;
        }

        #endregion
    }
}
