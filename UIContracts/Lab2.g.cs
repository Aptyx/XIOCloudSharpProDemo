//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by CrestronConstruct.
//     AppHost:     2.101.8.0
//     UI Plugin:   1.3701.9.0
//
//     Project:     MEP621_XPanel
//     Version:     1.0.0.0
//     Sdk:         CH5:2.11.1.2
//     Strategy:    Modern
//     IndexOnly:   False
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Crestron.SimplSharp;
using Crestron.SimplSharpPro;
using Crestron.SimplSharpPro.DeviceSupport;
using MEP621_XPanel;

namespace MEP621_XPanel
{

    /// <summary>
    /// Lab2
    /// </summary>
    public partial interface ILab2 
    {
        object UserObject { get; set; }

        /// <summary>
        /// Event btnBack.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> btnBack_PressEvent;

        /// <summary>
        /// Event btnCheck1.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> btnCheck1_PressEvent;

        /// <summary>
        /// Event btnCheck2.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> btnCheck2_PressEvent;

        /// <summary>
        /// Event btnCheck3.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> btnCheck3_PressEvent;

        /// <summary>
        /// Event btnCheck4.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> btnCheck4_PressEvent;

        /// <summary>
        /// Event btnCheckComplete.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> btnCheckComplete_PressEvent;

        /// <summary>
        /// Event btnStartCheck.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> btnStartCheck_PressEvent;

        /// <summary>
        /// btnBack.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void btnBack_Selected(Lab2BoolInputSigDelegate callback);

        /// <summary>
        /// btnBack.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void btnBack_Selected(bool digital);

        /// <summary>
        /// btnMaintenanceOff.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void btnMaintenanceOff_Selected(Lab2BoolInputSigDelegate callback);

        /// <summary>
        /// btnMaintenanceOff.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void btnMaintenanceOff_Selected(bool digital);

        /// <summary>
        /// btnMaintenanceOn.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void btnMaintenanceOn_Selected(Lab2BoolInputSigDelegate callback);

        /// <summary>
        /// btnMaintenanceOn.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void btnMaintenanceOn_Selected(bool digital);

        /// <summary>
        /// btnSystemCheck.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void btnSystemCheck_Selected(Lab2BoolInputSigDelegate callback);

        /// <summary>
        /// btnSystemCheck.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void btnSystemCheck_Selected(bool digital);

        /// <summary>
        /// btnCheck1.Mode Feedback
        /// </summary>
        /// <param name="callback">The ushort delegate to update the panel.</param>
        void btnCheck1_Mode(Lab2UShortInputSigDelegate callback);

        /// <summary>
        /// btnCheck1.Mode Feedback
        /// </summary>
        /// <param name="callback">The ushort analog to update the panel.</param>
        void btnCheck1_Mode(ushort analog);

        /// <summary>
        /// btnCheck1.Mode Feedback
        /// </summary>
        /// <param name="callback">The short analog to update the panel.</param>
        void btnCheck1_Mode(short analog);

        /// <summary>
        /// btnCheck2.Mode Feedback
        /// </summary>
        /// <param name="callback">The ushort delegate to update the panel.</param>
        void btnCheck2_Mode(Lab2UShortInputSigDelegate callback);

        /// <summary>
        /// btnCheck2.Mode Feedback
        /// </summary>
        /// <param name="callback">The ushort analog to update the panel.</param>
        void btnCheck2_Mode(ushort analog);

        /// <summary>
        /// btnCheck2.Mode Feedback
        /// </summary>
        /// <param name="callback">The short analog to update the panel.</param>
        void btnCheck2_Mode(short analog);

        /// <summary>
        /// btnCheck3.Mode Feedback
        /// </summary>
        /// <param name="callback">The ushort delegate to update the panel.</param>
        void btnCheck3_Mode(Lab2UShortInputSigDelegate callback);

        /// <summary>
        /// btnCheck3.Mode Feedback
        /// </summary>
        /// <param name="callback">The ushort analog to update the panel.</param>
        void btnCheck3_Mode(ushort analog);

        /// <summary>
        /// btnCheck3.Mode Feedback
        /// </summary>
        /// <param name="callback">The short analog to update the panel.</param>
        void btnCheck3_Mode(short analog);

        /// <summary>
        /// btnCheck4.Mode Feedback
        /// </summary>
        /// <param name="callback">The ushort delegate to update the panel.</param>
        void btnCheck4_Mode(Lab2UShortInputSigDelegate callback);

        /// <summary>
        /// btnCheck4.Mode Feedback
        /// </summary>
        /// <param name="callback">The ushort analog to update the panel.</param>
        void btnCheck4_Mode(ushort analog);

        /// <summary>
        /// btnCheck4.Mode Feedback
        /// </summary>
        /// <param name="callback">The short analog to update the panel.</param>
        void btnCheck4_Mode(short analog);

        /// <summary>
        /// txtCheckStatus.Indirect Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void txtCheckStatus_Indirect(Lab2StringInputSigDelegate callback);

        /// <summary>
        /// txtCheckStatus.Indirect Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void txtCheckStatus_Indirect(string serial);

        /// <summary>
        /// txtRoomName.Indirect Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void txtRoomName_Indirect(Lab2StringInputSigDelegate callback);

        /// <summary>
        /// txtRoomName.Indirect Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void txtRoomName_Indirect(string serial);

        /// <summary>
        /// txtSystemCheck.Indirect Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void txtSystemCheck_Indirect(Lab2StringInputSigDelegate callback);

        /// <summary>
        /// txtSystemCheck.Indirect Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void txtSystemCheck_Indirect(string serial);
    }

    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="boolInputSig">The <see cref="BoolInputSig"/> joinInfo data.</param>
    /// <param name="lab2">The <see cref="ILab2"/> on which to apply the feedback.</param>
    public delegate void Lab2BoolInputSigDelegate(BoolInputSig boolInputSig, ILab2 lab2);
    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="uShortInputSig">The <see cref="UShortInputSig"/> joinInfo data.</param>
    /// <param name="lab2">The <see cref="ILab2"/> on which to apply the feedback.</param>
    public delegate void Lab2UShortInputSigDelegate(UShortInputSig uShortInputSig, ILab2 lab2);
    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="stringInputSig">The <see cref="StringInputSig"/> joinInfo data.</param>
    /// <param name="lab2">The <see cref="ILab2"/> on which to apply the feedback.</param>
    public delegate void Lab2StringInputSigDelegate(StringInputSig stringInputSig, ILab2 lab2);

    /// <summary>
    /// Lab2
    /// </summary>
    internal partial class Lab2 : ILab2, IDisposable
    {
        #region Standard CH5 Component members

        private ComponentMediator ComponentMediator { get; set; }

        public object UserObject { get; set; }

        /// <summary>
        /// Gets the ControlJoinId a.k.a. SmartObjectId.  This Id identifies the extender symbol.
        /// </summary>
        public uint ControlJoinId { get; private set; }

        private IList<BasicTriListWithSmartObject> _devices;

        /// <summary>
        /// Gets the list of devices.
        /// </summary>
        public IList<BasicTriListWithSmartObject> Devices { get { return _devices; } }

        #endregion

        #region Joins

        private static class Joins
        {
            /// <summary>
            /// Digital signals,
            /// </summary>
            internal static class Booleans
            {
                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Lab2.btnBack.Press
                /// btnBack.Press
                /// </summary>
                public const uint btnBack_PressEvent = 3;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Lab2.btnCheck1.Press
                /// btnCheck1.Press
                /// </summary>
                public const uint btnCheck1_PressEvent = 4;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Lab2.btnCheck2.Press
                /// btnCheck2.Press
                /// </summary>
                public const uint btnCheck2_PressEvent = 5;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Lab2.btnCheck3.Press
                /// btnCheck3.Press
                /// </summary>
                public const uint btnCheck3_PressEvent = 6;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Lab2.btnCheck4.Press
                /// btnCheck4.Press
                /// </summary>
                public const uint btnCheck4_PressEvent = 7;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Lab2.btnCheckComplete.Press
                /// btnCheckComplete.Press
                /// </summary>
                public const uint btnCheckComplete_PressEvent = 8;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Lab2.btnStartCheck.Press
                /// btnStartCheck.Press
                /// </summary>
                public const uint btnStartCheck_PressEvent = 9;


                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Lab2.btnBack.Selected
                /// btnBack.Selected
                /// </summary>
                public const uint btnBack_SelectedState = 3;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Lab2.btnMaintenanceOff.Selected
                /// btnMaintenanceOff.Selected
                /// </summary>
                public const uint btnMaintenanceOff_SelectedState = 4;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Lab2.btnMaintenanceOn.Selected
                /// btnMaintenanceOn.Selected
                /// </summary>
                public const uint btnMaintenanceOn_SelectedState = 5;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Lab2.btnSystemCheck.Selected
                /// btnSystemCheck.Selected
                /// </summary>
                public const uint btnSystemCheck_SelectedState = 6;

            }
            /// <summary>
            /// Analog signals.
            /// </summary>
            internal static class Numerics
            {

                /// <summary>
                /// Input or Feedback analog joinInfo from Control System to panel: Lab2.btnCheck1.Mode
                /// btnCheck1.Mode
                /// </summary>
                public const uint btnCheck1_ModeState = 9;

                /// <summary>
                /// Input or Feedback analog joinInfo from Control System to panel: Lab2.btnCheck2.Mode
                /// btnCheck2.Mode
                /// </summary>
                public const uint btnCheck2_ModeState = 10;

                /// <summary>
                /// Input or Feedback analog joinInfo from Control System to panel: Lab2.btnCheck3.Mode
                /// btnCheck3.Mode
                /// </summary>
                public const uint btnCheck3_ModeState = 11;

                /// <summary>
                /// Input or Feedback analog joinInfo from Control System to panel: Lab2.btnCheck4.Mode
                /// btnCheck4.Mode
                /// </summary>
                public const uint btnCheck4_ModeState = 12;

            }
            /// <summary>
            /// Serial signals.
            /// </summary>
            internal static class Strings
            {

                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: Lab2.txtCheckStatus.Indirect
                /// txtCheckStatus.Indirect
                /// </summary>
                public const uint txtCheckStatus_IndirectState = 1;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: Lab2.txtRoomName.Indirect
                /// txtRoomName.Indirect
                /// </summary>
                public const uint txtRoomName_IndirectState = 2;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: Lab2.txtSystemCheck.Indirect
                /// txtSystemCheck.Indirect
                /// </summary>
                public const uint txtSystemCheck_IndirectState = 3;
            }
        }

        #endregion

        #region Construction and Initialization

        /// <summary>
        /// Initializes a new instance of the <see cref="Lab2"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        internal Lab2(ComponentMediator componentMediator, uint controlJoinId, uint? itemCount)
        {
            ComponentMediator = componentMediator;
            Initialize(controlJoinId, itemCount);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Lab2"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        internal Lab2(ComponentMediator componentMediator, uint controlJoinId) : this(componentMediator, controlJoinId, null)
        {
        }

        /// <summary>
        /// Initializes a new instance with default itemCount.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        private void Initialize(uint controlJoinId)
        {
            Initialize(controlJoinId, null);
        }

        private Dictionary<string, Indexes> _indexLookup = new Dictionary<string, Indexes>();

        /// <summary>
        /// Initializes a new instance of the <see cref="Lab2"/> component class.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        private void Initialize(uint controlJoinId, uint? itemCount)
        {
            ControlJoinId = controlJoinId; 
 
            _devices = new List<BasicTriListWithSmartObject>(); 
 
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.btnBack_PressEvent, onbtnBack_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.btnCheck1_PressEvent, onbtnCheck1_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.btnCheck2_PressEvent, onbtnCheck2_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.btnCheck3_PressEvent, onbtnCheck3_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.btnCheck4_PressEvent, onbtnCheck4_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.btnCheckComplete_PressEvent, onbtnCheckComplete_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.btnStartCheck_PressEvent, onbtnStartCheck_Press);
        }

        public void AddDevice(BasicTriListWithSmartObject device)
        {
            Devices.Add(device);
            ComponentMediator.HookSmartObjectEvents(device.SmartObjects[ControlJoinId]);
        }

        public void RemoveDevice(BasicTriListWithSmartObject device)
        {
            Devices.Remove(device);
            ComponentMediator.UnHookSmartObjectEvents(device.SmartObjects[ControlJoinId]);
        }

        #endregion

        #region CH5 Contract

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> btnBack_PressEvent;
        private void onbtnBack_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = btnBack_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> btnCheck1_PressEvent;
        private void onbtnCheck1_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = btnCheck1_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> btnCheck2_PressEvent;
        private void onbtnCheck2_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = btnCheck2_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> btnCheck3_PressEvent;
        private void onbtnCheck3_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = btnCheck3_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> btnCheck4_PressEvent;
        private void onbtnCheck4_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = btnCheck4_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> btnCheckComplete_PressEvent;
        private void onbtnCheckComplete_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = btnCheckComplete_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> btnStartCheck_PressEvent;
        private void onbtnStartCheck_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = btnStartCheck_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public void btnBack_Selected(Lab2BoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.btnBack_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void btnBack_Selected(bool digital)
        {
            btnBack_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void btnMaintenanceOff_Selected(Lab2BoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.btnMaintenanceOff_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void btnMaintenanceOff_Selected(bool digital)
        {
            btnMaintenanceOff_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void btnMaintenanceOn_Selected(Lab2BoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.btnMaintenanceOn_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void btnMaintenanceOn_Selected(bool digital)
        {
            btnMaintenanceOn_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void btnSystemCheck_Selected(Lab2BoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.btnSystemCheck_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void btnSystemCheck_Selected(bool digital)
        {
            btnSystemCheck_Selected((sig, component) => sig.BoolValue = digital);
        }

        /// <inheritdoc/>
        public void btnCheck1_Mode(Lab2UShortInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].UShortInput[Joins.Numerics.btnCheck1_ModeState], this);
            }
        }

        /// <inheritdoc/>
        public void btnCheck1_Mode(ushort analog)
        {
            btnCheck1_Mode((sig, component) => sig.UShortValue = analog);
        }

        /// <inheritdoc/>
        public void btnCheck1_Mode(short analog)
        {
            btnCheck1_Mode((sig, component) => sig.ShortValue = analog);
        }
        /// <inheritdoc/>
        public void btnCheck2_Mode(Lab2UShortInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].UShortInput[Joins.Numerics.btnCheck2_ModeState], this);
            }
        }

        /// <inheritdoc/>
        public void btnCheck2_Mode(ushort analog)
        {
            btnCheck2_Mode((sig, component) => sig.UShortValue = analog);
        }

        /// <inheritdoc/>
        public void btnCheck2_Mode(short analog)
        {
            btnCheck2_Mode((sig, component) => sig.ShortValue = analog);
        }
        /// <inheritdoc/>
        public void btnCheck3_Mode(Lab2UShortInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].UShortInput[Joins.Numerics.btnCheck3_ModeState], this);
            }
        }

        /// <inheritdoc/>
        public void btnCheck3_Mode(ushort analog)
        {
            btnCheck3_Mode((sig, component) => sig.UShortValue = analog);
        }

        /// <inheritdoc/>
        public void btnCheck3_Mode(short analog)
        {
            btnCheck3_Mode((sig, component) => sig.ShortValue = analog);
        }
        /// <inheritdoc/>
        public void btnCheck4_Mode(Lab2UShortInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].UShortInput[Joins.Numerics.btnCheck4_ModeState], this);
            }
        }

        /// <inheritdoc/>
        public void btnCheck4_Mode(ushort analog)
        {
            btnCheck4_Mode((sig, component) => sig.UShortValue = analog);
        }

        /// <inheritdoc/>
        public void btnCheck4_Mode(short analog)
        {
            btnCheck4_Mode((sig, component) => sig.ShortValue = analog);
        }

        /// <inheritdoc/>
        public void txtCheckStatus_Indirect(Lab2StringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.txtCheckStatus_IndirectState], this);
            }
        }

        /// <inheritdoc/>
        public void txtCheckStatus_Indirect(string serial)
        {
            txtCheckStatus_Indirect((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void txtRoomName_Indirect(Lab2StringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.txtRoomName_IndirectState], this);
            }
        }

        /// <inheritdoc/>
        public void txtRoomName_Indirect(string serial)
        {
            txtRoomName_Indirect((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void txtSystemCheck_Indirect(Lab2StringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.txtSystemCheck_IndirectState], this);
            }
        }

        /// <inheritdoc/>
        public void txtSystemCheck_Indirect(string serial)
        {
            txtSystemCheck_Indirect((sig, component) => sig.StringValue = serial);
        }

        #endregion

        #region Overrides

        public override int GetHashCode()
        {
            return (int)ControlJoinId;
        }

        public override string ToString()
        {
            return string.Format("Contract: {0} Component: {1} HashCode: {2} {3}", "Lab2", GetType().Name, GetHashCode(), UserObject != null ? "UserObject: " + UserObject : null);
        }

        #endregion

        #region IDisposable

        public bool IsDisposed { get; set; }

        public void Dispose()
        {
            if (IsDisposed)
                return;

            IsDisposed = true;

            btnBack_PressEvent = null;
            btnCheck1_PressEvent = null;
            btnCheck2_PressEvent = null;
            btnCheck3_PressEvent = null;
            btnCheck4_PressEvent = null;
            btnCheckComplete_PressEvent = null;
            btnStartCheck_PressEvent = null;
        }

        #endregion
    }
}
