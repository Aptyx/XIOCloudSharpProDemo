//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by CrestronConstruct.
//     AppHost:     2.101.8.0
//     UI Plugin:   1.3701.9.0
//
//     Project:     MEP621_XPanel
//     Version:     1.0.0.0
//     Sdk:         CH5:2.11.1.2
//     Strategy:    Modern
//     IndexOnly:   False
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Crestron.SimplSharp;
using Crestron.SimplSharpPro;
using Crestron.SimplSharpPro.DeviceSupport;
using MEP621_XPanel;

namespace MEP621_XPanel
{

    /// <summary>
    /// Lab0
    /// </summary>
    public partial interface ILab0 
    {
        object UserObject { get; set; }

        /// <summary>
        /// Event btnBack.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> btnBack_PressEvent;

        /// <summary>
        /// Event btnDisplayPowerOff.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> btnDisplayPowerOff_PressEvent;

        /// <summary>
        /// Event btnDisplayPowerOn.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> btnDisplayPowerOn_PressEvent;

        /// <summary>
        /// Event btnSource1.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> btnSource1_PressEvent;

        /// <summary>
        /// Event btnSource2.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> btnSource2_PressEvent;

        /// <summary>
        /// Event btnSource3.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> btnSource3_PressEvent;

        /// <summary>
        /// Event btnSystemPowerOff.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> btnSystemPowerOff_PressEvent;

        /// <summary>
        /// Event btnSystemPowerOn.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> btnSystemPowerOn_PressEvent;

        /// <summary>
        /// btnBack.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void btnBack_Selected(Lab0BoolInputSigDelegate callback);

        /// <summary>
        /// btnBack.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void btnBack_Selected(bool digital);

        /// <summary>
        /// btnDisplayPowerOff.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void btnDisplayPowerOff_Selected(Lab0BoolInputSigDelegate callback);

        /// <summary>
        /// btnDisplayPowerOff.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void btnDisplayPowerOff_Selected(bool digital);

        /// <summary>
        /// btnDisplayPowerOn.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void btnDisplayPowerOn_Selected(Lab0BoolInputSigDelegate callback);

        /// <summary>
        /// btnDisplayPowerOn.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void btnDisplayPowerOn_Selected(bool digital);

        /// <summary>
        /// btnSource1.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void btnSource1_Selected(Lab0BoolInputSigDelegate callback);

        /// <summary>
        /// btnSource1.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void btnSource1_Selected(bool digital);

        /// <summary>
        /// btnSource2.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void btnSource2_Selected(Lab0BoolInputSigDelegate callback);

        /// <summary>
        /// btnSource2.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void btnSource2_Selected(bool digital);

        /// <summary>
        /// btnSource3.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void btnSource3_Selected(Lab0BoolInputSigDelegate callback);

        /// <summary>
        /// btnSource3.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void btnSource3_Selected(bool digital);

        /// <summary>
        /// btnSystemPowerOff.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void btnSystemPowerOff_Selected(Lab0BoolInputSigDelegate callback);

        /// <summary>
        /// btnSystemPowerOff.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void btnSystemPowerOff_Selected(bool digital);

        /// <summary>
        /// btnSystemPowerOn.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void btnSystemPowerOn_Selected(Lab0BoolInputSigDelegate callback);

        /// <summary>
        /// btnSystemPowerOn.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void btnSystemPowerOn_Selected(bool digital);

        /// <summary>
        /// txtRoomName.Indirect Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void txtRoomName_Indirect(Lab0StringInputSigDelegate callback);

        /// <summary>
        /// txtRoomName.Indirect Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void txtRoomName_Indirect(string serial);

        /// <summary>
        /// txtSources.Indirect Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void txtSources_Indirect(Lab0StringInputSigDelegate callback);

        /// <summary>
        /// txtSources.Indirect Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void txtSources_Indirect(string serial);
    }

    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="boolInputSig">The <see cref="BoolInputSig"/> joinInfo data.</param>
    /// <param name="lab0">The <see cref="ILab0"/> on which to apply the feedback.</param>
    public delegate void Lab0BoolInputSigDelegate(BoolInputSig boolInputSig, ILab0 lab0);
    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="stringInputSig">The <see cref="StringInputSig"/> joinInfo data.</param>
    /// <param name="lab0">The <see cref="ILab0"/> on which to apply the feedback.</param>
    public delegate void Lab0StringInputSigDelegate(StringInputSig stringInputSig, ILab0 lab0);

    /// <summary>
    /// Lab0
    /// </summary>
    internal partial class Lab0 : ILab0, IDisposable
    {
        #region Standard CH5 Component members

        private ComponentMediator ComponentMediator { get; set; }

        public object UserObject { get; set; }

        /// <summary>
        /// Gets the ControlJoinId a.k.a. SmartObjectId.  This Id identifies the extender symbol.
        /// </summary>
        public uint ControlJoinId { get; private set; }

        private IList<BasicTriListWithSmartObject> _devices;

        /// <summary>
        /// Gets the list of devices.
        /// </summary>
        public IList<BasicTriListWithSmartObject> Devices { get { return _devices; } }

        #endregion

        #region Joins

        private static class Joins
        {
            /// <summary>
            /// Digital signals,
            /// </summary>
            internal static class Booleans
            {
                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Lab0.btnBack.Press
                /// btnBack.Press
                /// </summary>
                public const uint btnBack_PressEvent = 3;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Lab0.btnDisplayPowerOff.Press
                /// btnDisplayPowerOff.Press
                /// </summary>
                public const uint btnDisplayPowerOff_PressEvent = 4;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Lab0.btnDisplayPowerOn.Press
                /// btnDisplayPowerOn.Press
                /// </summary>
                public const uint btnDisplayPowerOn_PressEvent = 5;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Lab0.btnSource1.Press
                /// btnSource1.Press
                /// </summary>
                public const uint btnSource1_PressEvent = 6;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Lab0.btnSource2.Press
                /// btnSource2.Press
                /// </summary>
                public const uint btnSource2_PressEvent = 7;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Lab0.btnSource3.Press
                /// btnSource3.Press
                /// </summary>
                public const uint btnSource3_PressEvent = 8;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Lab0.btnSystemPowerOff.Press
                /// btnSystemPowerOff.Press
                /// </summary>
                public const uint btnSystemPowerOff_PressEvent = 9;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Lab0.btnSystemPowerOn.Press
                /// btnSystemPowerOn.Press
                /// </summary>
                public const uint btnSystemPowerOn_PressEvent = 10;


                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Lab0.btnBack.Selected
                /// btnBack.Selected
                /// </summary>
                public const uint btnBack_SelectedState = 3;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Lab0.btnDisplayPowerOff.Selected
                /// btnDisplayPowerOff.Selected
                /// </summary>
                public const uint btnDisplayPowerOff_SelectedState = 4;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Lab0.btnDisplayPowerOn.Selected
                /// btnDisplayPowerOn.Selected
                /// </summary>
                public const uint btnDisplayPowerOn_SelectedState = 5;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Lab0.btnSource1.Selected
                /// btnSource1.Selected
                /// </summary>
                public const uint btnSource1_SelectedState = 6;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Lab0.btnSource2.Selected
                /// btnSource2.Selected
                /// </summary>
                public const uint btnSource2_SelectedState = 7;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Lab0.btnSource3.Selected
                /// btnSource3.Selected
                /// </summary>
                public const uint btnSource3_SelectedState = 8;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Lab0.btnSystemPowerOff.Selected
                /// btnSystemPowerOff.Selected
                /// </summary>
                public const uint btnSystemPowerOff_SelectedState = 9;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Lab0.btnSystemPowerOn.Selected
                /// btnSystemPowerOn.Selected
                /// </summary>
                public const uint btnSystemPowerOn_SelectedState = 10;

            }
            /// <summary>
            /// Serial signals.
            /// </summary>
            internal static class Strings
            {

                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: Lab0.txtRoomName.Indirect
                /// txtRoomName.Indirect
                /// </summary>
                public const uint txtRoomName_IndirectState = 1;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: Lab0.txtSources.Indirect
                /// txtSources.Indirect
                /// </summary>
                public const uint txtSources_IndirectState = 2;
            }
        }

        #endregion

        #region Construction and Initialization

        /// <summary>
        /// Initializes a new instance of the <see cref="Lab0"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        internal Lab0(ComponentMediator componentMediator, uint controlJoinId, uint? itemCount)
        {
            ComponentMediator = componentMediator;
            Initialize(controlJoinId, itemCount);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Lab0"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        internal Lab0(ComponentMediator componentMediator, uint controlJoinId) : this(componentMediator, controlJoinId, null)
        {
        }

        /// <summary>
        /// Initializes a new instance with default itemCount.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        private void Initialize(uint controlJoinId)
        {
            Initialize(controlJoinId, null);
        }

        private Dictionary<string, Indexes> _indexLookup = new Dictionary<string, Indexes>();

        /// <summary>
        /// Initializes a new instance of the <see cref="Lab0"/> component class.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        private void Initialize(uint controlJoinId, uint? itemCount)
        {
            ControlJoinId = controlJoinId; 
 
            _devices = new List<BasicTriListWithSmartObject>(); 
 
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.btnBack_PressEvent, onbtnBack_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.btnDisplayPowerOff_PressEvent, onbtnDisplayPowerOff_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.btnDisplayPowerOn_PressEvent, onbtnDisplayPowerOn_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.btnSource1_PressEvent, onbtnSource1_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.btnSource2_PressEvent, onbtnSource2_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.btnSource3_PressEvent, onbtnSource3_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.btnSystemPowerOff_PressEvent, onbtnSystemPowerOff_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.btnSystemPowerOn_PressEvent, onbtnSystemPowerOn_Press);
        }

        public void AddDevice(BasicTriListWithSmartObject device)
        {
            Devices.Add(device);
            ComponentMediator.HookSmartObjectEvents(device.SmartObjects[ControlJoinId]);
        }

        public void RemoveDevice(BasicTriListWithSmartObject device)
        {
            Devices.Remove(device);
            ComponentMediator.UnHookSmartObjectEvents(device.SmartObjects[ControlJoinId]);
        }

        #endregion

        #region CH5 Contract

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> btnBack_PressEvent;
        private void onbtnBack_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = btnBack_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> btnDisplayPowerOff_PressEvent;
        private void onbtnDisplayPowerOff_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = btnDisplayPowerOff_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> btnDisplayPowerOn_PressEvent;
        private void onbtnDisplayPowerOn_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = btnDisplayPowerOn_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> btnSource1_PressEvent;
        private void onbtnSource1_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = btnSource1_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> btnSource2_PressEvent;
        private void onbtnSource2_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = btnSource2_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> btnSource3_PressEvent;
        private void onbtnSource3_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = btnSource3_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> btnSystemPowerOff_PressEvent;
        private void onbtnSystemPowerOff_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = btnSystemPowerOff_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> btnSystemPowerOn_PressEvent;
        private void onbtnSystemPowerOn_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = btnSystemPowerOn_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public void btnBack_Selected(Lab0BoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.btnBack_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void btnBack_Selected(bool digital)
        {
            btnBack_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void btnDisplayPowerOff_Selected(Lab0BoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.btnDisplayPowerOff_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void btnDisplayPowerOff_Selected(bool digital)
        {
            btnDisplayPowerOff_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void btnDisplayPowerOn_Selected(Lab0BoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.btnDisplayPowerOn_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void btnDisplayPowerOn_Selected(bool digital)
        {
            btnDisplayPowerOn_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void btnSource1_Selected(Lab0BoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.btnSource1_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void btnSource1_Selected(bool digital)
        {
            btnSource1_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void btnSource2_Selected(Lab0BoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.btnSource2_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void btnSource2_Selected(bool digital)
        {
            btnSource2_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void btnSource3_Selected(Lab0BoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.btnSource3_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void btnSource3_Selected(bool digital)
        {
            btnSource3_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void btnSystemPowerOff_Selected(Lab0BoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.btnSystemPowerOff_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void btnSystemPowerOff_Selected(bool digital)
        {
            btnSystemPowerOff_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void btnSystemPowerOn_Selected(Lab0BoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.btnSystemPowerOn_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void btnSystemPowerOn_Selected(bool digital)
        {
            btnSystemPowerOn_Selected((sig, component) => sig.BoolValue = digital);
        }


        /// <inheritdoc/>
        public void txtRoomName_Indirect(Lab0StringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.txtRoomName_IndirectState], this);
            }
        }

        /// <inheritdoc/>
        public void txtRoomName_Indirect(string serial)
        {
            txtRoomName_Indirect((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void txtSources_Indirect(Lab0StringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.txtSources_IndirectState], this);
            }
        }

        /// <inheritdoc/>
        public void txtSources_Indirect(string serial)
        {
            txtSources_Indirect((sig, component) => sig.StringValue = serial);
        }

        #endregion

        #region Overrides

        public override int GetHashCode()
        {
            return (int)ControlJoinId;
        }

        public override string ToString()
        {
            return string.Format("Contract: {0} Component: {1} HashCode: {2} {3}", "Lab0", GetType().Name, GetHashCode(), UserObject != null ? "UserObject: " + UserObject : null);
        }

        #endregion

        #region IDisposable

        public bool IsDisposed { get; set; }

        public void Dispose()
        {
            if (IsDisposed)
                return;

            IsDisposed = true;

            btnBack_PressEvent = null;
            btnDisplayPowerOff_PressEvent = null;
            btnDisplayPowerOn_PressEvent = null;
            btnSource1_PressEvent = null;
            btnSource2_PressEvent = null;
            btnSource3_PressEvent = null;
            btnSystemPowerOff_PressEvent = null;
            btnSystemPowerOn_PressEvent = null;
        }

        #endregion
    }
}
